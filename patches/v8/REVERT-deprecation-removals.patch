From 9de9caa6f7c78c8d993d886f1460c4b4b22bd2c5 Mon Sep 17 00:00:00 2001
From: Levi Zim <rsworktech@outlook.com>
Date: Tue, 20 Aug 2024 05:06:47 +0200
Subject: [PATCH 1/3] Revert "Zone: Remove ZoneBackingAllocator"

This reverts commit 7448e8cacb948a7be3c7b9b84c30310786332ce0.
---
 include/v8-platform.h            | 20 ++++++++++++++++++++
 src/wasm/canonical-types.cc      |  2 +-
 src/zone/accounting-allocator.cc |  6 +++++-
 src/zone/accounting-allocator.h  |  3 +++
 4 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/include/v8-platform.h b/include/v8-platform.h
index 5110f432077..56bfd727482 100644
--- a/include/v8-platform.h
+++ b/include/v8-platform.h
@@ -1027,6 +1027,18 @@ class VirtualAddressSpace {
   const PagePermissions max_page_permissions_;
 };
 
+/**
+ * V8 Allocator used for allocating zone backings.
+ */
+class ZoneBackingAllocator {
+ public:
+  using MallocFn = void* (*)(size_t);
+  using FreeFn = void (*)(void*);
+
+  virtual MallocFn GetMallocFn() const { return ::malloc; }
+  virtual FreeFn GetFreeFn() const { return ::free; }
+};
+
 /**
  * Observer used by V8 to notify the embedder about entering/leaving sections
  * with high throughput of malloc/free operations.
@@ -1063,6 +1075,14 @@ class Platform {
     return nullptr;
   }
 
+  /**
+   * Allows the embedder to specify a custom allocator used for zones.
+   */
+  virtual ZoneBackingAllocator* GetZoneBackingAllocator() {
+    static ZoneBackingAllocator default_allocator;
+    return &default_allocator;
+  }
+
   /**
    * Enables the embedder to respond in cases where V8 can't allocate large
    * blocks of memory. V8 retries the failed allocation once after calling this
diff --git a/src/wasm/canonical-types.cc b/src/wasm/canonical-types.cc
index 59df267281d..2c5c9092c5f 100644
--- a/src/wasm/canonical-types.cc
+++ b/src/wasm/canonical-types.cc
@@ -342,7 +342,7 @@ int TypeCanonicalizer::FindCanonicalGroup(const CanonicalSingletonGroup& group,
 }
 
 size_t TypeCanonicalizer::EstimateCurrentMemoryConsumption() const {
-  UPDATE_WHEN_CLASS_CHANGES(TypeCanonicalizer, 296);
+  UPDATE_WHEN_CLASS_CHANGES(TypeCanonicalizer, 312);
   // The storage of the canonical group's types is accounted for via the
   // allocator below (which tracks the zone memory).
   base::MutexGuard mutex_guard(&mutex_);
diff --git a/src/zone/accounting-allocator.cc b/src/zone/accounting-allocator.cc
index e0fe5a58e5d..fabee899d38 100644
--- a/src/zone/accounting-allocator.cc
+++ b/src/zone/accounting-allocator.cc
@@ -65,7 +65,11 @@ std::unique_ptr<v8::base::BoundedPageAllocator> CreateBoundedAllocator(
 
 }  // namespace
 
-AccountingAllocator::AccountingAllocator() {
+AccountingAllocator::AccountingAllocator()
+    : zone_backing_malloc_(
+          V8::GetCurrentPlatform()->GetZoneBackingAllocator()->GetMallocFn()),
+      zone_backing_free_(
+          V8::GetCurrentPlatform()->GetZoneBackingAllocator()->GetFreeFn()) {
   if (COMPRESS_ZONES_BOOL) {
     v8::PageAllocator* platform_page_allocator = GetPlatformPageAllocator();
     VirtualMemory memory = ReserveAddressSpace(platform_page_allocator);
diff --git a/src/zone/accounting-allocator.h b/src/zone/accounting-allocator.h
index 4e1f9442ff4..7fdc86da7d2 100644
--- a/src/zone/accounting-allocator.h
+++ b/src/zone/accounting-allocator.h
@@ -72,6 +72,9 @@ class V8_EXPORT_PRIVATE AccountingAllocator {
 
   std::unique_ptr<VirtualMemory> reserved_area_;
   std::unique_ptr<base::BoundedPageAllocator> bounded_page_allocator_;
+
+  ZoneBackingAllocator::MallocFn zone_backing_malloc_ = nullptr;
+  ZoneBackingAllocator::FreeFn zone_backing_free_ = nullptr;
 };
 
 }  // namespace internal
-- 
2.45.2


From 89e54e12b1cf74d2e75d9458c191521447770ab5 Mon Sep 17 00:00:00 2001
From: kxxt <rsworktech@outlook.com>
Date: Tue, 20 Aug 2024 07:28:47 +0200
Subject: [PATCH 2/3] Revert "[fastapi] Delete deprecated field
 FastApiCallbackOptions::fallback"

This reverts commit be03ed2efc10b71c89ce76ef89c5c5325b527e68.
---
 include/v8-fast-api-calls.h                   | 17 +++++++++
 src/compiler/fast-api-calls.cc                | 30 ++++++++++++---
 .../fast-api-call-lowering-reducer.h          | 13 ++++++-
 test/cctest/test-api.cc                       | 38 +++++++++++--------
 4 files changed, 76 insertions(+), 22 deletions(-)

diff --git a/include/v8-fast-api-calls.h b/include/v8-fast-api-calls.h
index 18466688cf9..18422e19cc5 100644
--- a/include/v8-fast-api-calls.h
+++ b/include/v8-fast-api-calls.h
@@ -589,6 +589,23 @@ struct FastApiCallbackOptions {
 
   v8::Isolate* isolate = nullptr;
 
+  /**
+   * If the callback wants to signal an error condition or to perform an
+   * allocation, it must set options.fallback to true and do an early return
+   * from the fast method. Then V8 checks the value of options.fallback and if
+   * it's true, falls back to executing the SlowCallback, which is capable of
+   * reporting the error (either by throwing a JS exception or logging to the
+   * console) or doing the allocation. It's the embedder's responsibility to
+   * ensure that the fast callback is idempotent up to the point where error and
+   * fallback conditions are checked, because otherwise executing the slow
+   * callback might produce visible side-effects twice.
+   */
+  V8_DEPRECATED(
+      "It is not necessary to use the `fallback` flag anymore, as it is "
+      "possible now to trigger GC, throw exceptions, and call back into "
+      "JavaScript even in API functions called with a fast API call.")
+  bool fallback = false;
+
   /**
    * The `data` passed to the FunctionTemplate constructor, or `undefined`.
    */
diff --git a/src/compiler/fast-api-calls.cc b/src/compiler/fast-api-calls.cc
index bcd1033cdec..7f56f42ec74 100644
--- a/src/compiler/fast-api-calls.cc
+++ b/src/compiler/fast-api-calls.cc
@@ -364,9 +364,15 @@ Node* FastApiCallBuilder::Build(const FastApiCallFunctionVector& c_functions,
     // If this check fails, you've probably added new fields to
     // v8::FastApiCallbackOptions, which means you'll need to write code
     // that initializes and reads from them too.
-    static_assert(kSize == sizeof(uintptr_t) * 2);
+    static_assert(kSize == sizeof(uintptr_t) * 3);
     stack_slot = __ StackSlot(kSize, kAlign);
 
+    __ Store(
+        StoreRepresentation(MachineRepresentation::kWord32, kNoWriteBarrier),
+        stack_slot,
+        static_cast<int>(offsetof(v8::FastApiCallbackOptions, fallback)),
+        __ Int32Constant(0));
+
     __ Store(StoreRepresentation(MachineType::PointerRepresentation(),
                                  kNoWriteBarrier),
              stack_slot,
@@ -415,11 +421,25 @@ Node* FastApiCallBuilder::Build(const FastApiCallFunctionVector& c_functions,
   Node* fast_call_result = convert_return_value_(c_signature, c_call_result);
 
   auto merge = __ MakeLabel(MachineRepresentation::kTagged);
-  __ Goto(&if_success);
+  if (c_signature->HasOptions()) {
+    DCHECK_NOT_NULL(stack_slot);
+    Node* load = __ Load(
+        MachineType::Int32(), stack_slot,
+        static_cast<int>(offsetof(v8::FastApiCallbackOptions, fallback)));
+
+    Node* is_zero = __ Word32Equal(load, __ Int32Constant(0));
+    __ Branch(is_zero, &if_success, &if_error);
+  } else {
+    __ Goto(&if_success);
+  }
 
-  // We need to generate a fallback (both fast and slow call) in case
-  // the generated code might fail, in case e.g. a Smi was passed where
-  // a JSObject was expected and an error must be thrown
+  // We need to generate a fallback (both fast and slow call) in case:
+  // 1) the generated code might fail, in case e.g. a Smi was passed where
+  // a JSObject was expected and an error must be thrown or
+  // 2) the embedder requested fallback possibility via providing options arg.
+  // None of the above usually holds true for Wasm functions with primitive
+  // types only, so we avoid generating an extra branch here.
+  DCHECK_IMPLIES(c_signature->HasOptions(), if_error.IsUsed());
   if (if_error.IsUsed()) {
     // Generate direct slow call.
     __ Bind(&if_error);
diff --git a/src/compiler/turboshaft/fast-api-call-lowering-reducer.h b/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
index 0132bfc9f66..2d268a242f5 100644
--- a/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
+++ b/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
@@ -87,7 +87,7 @@ class FastApiCallLoweringReducer : public Next {
         // If this check fails, you've probably added new fields to
         // v8::FastApiCallbackOptions, which means you'll need to write code
         // that initializes and reads from them too.
-        static_assert(kSize == sizeof(uintptr_t) * 2);
+        static_assert(kSize == sizeof(uintptr_t) * 3);
         stack_slot = __ StackSlot(kSize, kAlign);
 
         // isolate
@@ -96,6 +96,10 @@ class FastApiCallLoweringReducer : public Next {
             __ ExternalConstant(ExternalReference::isolate_address()),
             MemoryRepresentation::UintPtr(),
             offsetof(v8::FastApiCallbackOptions, isolate));
+        // fallback = 0
+        __ StoreOffHeap(stack_slot, __ Word32Constant(0),
+                        MemoryRepresentation::Int32(),
+                        offsetof(v8::FastApiCallbackOptions, fallback));
         // data = data_argument
         OpIndex data_argument_to_pass = __ AdaptLocalArgument(data_argument);
         __ StoreOffHeap(stack_slot, data_argument_to_pass,
@@ -128,6 +132,13 @@ class FastApiCallLoweringReducer : public Next {
       V<Object> fast_call_result =
           ConvertReturnValue(c_signature, c_call_result);
 
+      if (c_signature->HasOptions()) {
+        DCHECK(stack_slot.valid());
+        V<Word32> error = __ LoadOffHeap(
+            stack_slot, offsetof(v8::FastApiCallbackOptions, fallback),
+            MemoryRepresentation::Int32());
+        GOTO_IF(error, handle_error);
+      }
       GOTO(done, FastApiCallOp::kSuccessValue, fast_call_result);
       BIND(trigger_exception);
       __ template CallRuntime<
diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
index f140b5e3535..08bab56993f 100644
--- a/test/cctest/test-api.cc
+++ b/test/cctest/test-api.cc
@@ -27948,8 +27948,8 @@ struct BasicApiChecker {
     CHECK_EQ(Local<v8::Number>::Cast(options.data)->Value(), 42.5);
     return Impl::FastCallback(receiver, argument, options);
   }
-  static Ret FastCallbackNoOptions(v8::Local<v8::Object> receiver,
-                                   Value argument) {
+  static Ret FastCallbackNoFallback(v8::Local<v8::Object> receiver,
+                                    Value argument) {
     v8::FastApiCallbackOptions options =
         v8::FastApiCallbackOptions::CreateForTesting(v8::Isolate::GetCurrent());
     return Impl::FastCallback(receiver, argument, options);
@@ -27985,8 +27985,8 @@ static v8::AnyCType FastCallbackPatch(v8::AnyCType receiver,
 }
 template <typename Value, typename Impl, typename Ret,
           typename = std::enable_if_t<!std::is_void<Ret>::value>>
-static v8::AnyCType FastCallbackNoOptionsWrapper(v8::AnyCType receiver,
-                                                 v8::AnyCType argument) {
+static v8::AnyCType FastCallbackNoFallbackWrapper(v8::AnyCType receiver,
+                                                  v8::AnyCType argument) {
   v8::FastApiCallbackOptions options =
       v8::FastApiCallbackOptions::CreateForTesting(v8::Isolate::GetCurrent());
   v8::AnyCType ret = PrimitiveToMixedType<Ret>(Impl::FastCallback(
@@ -28003,8 +28003,8 @@ static void FastCallbackPatch(v8::AnyCType receiver, v8::AnyCType argument,
 }
 template <typename Value, typename Impl, typename Ret,
           typename = std::enable_if_t<std::is_void<Ret>::value>>
-static void FastCallbackNoOptionsWrapper(v8::AnyCType receiver,
-                                         v8::AnyCType argument) {
+static void FastCallbackNoFallbackWrapper(v8::AnyCType receiver,
+                                          v8::AnyCType argument) {
   v8::FastApiCallbackOptions options =
       v8::FastApiCallbackOptions::CreateForTesting(v8::Isolate::GetCurrent());
   return Impl::FastCallback(receiver.object_value,
@@ -28133,7 +28133,7 @@ struct ApiObjectChecker
 template <typename Value, typename Impl, typename Ret>
 bool SetupTest(v8::Local<v8::Value> initial_value, LocalContext* env,
                BasicApiChecker<Value, Impl, Ret>* checker,
-               const char* source_code, bool has_options = true,
+               const char* source_code, bool supports_fallback = true,
                bool accept_any_receiver = true, bool setup_try_catch = true) {
   v8::Isolate* isolate = CcTest::isolate();
   std::optional<v8::TryCatch> try_catch;
@@ -28142,7 +28142,7 @@ bool SetupTest(v8::Local<v8::Value> initial_value, LocalContext* env,
   }
 
   v8::CFunction c_func;
-  if (has_options) {
+  if (supports_fallback) {
 #ifdef V8_USE_SIMULATOR_WITH_GENERIC_C_CALLS
     c_func =
         v8::CFunction::Make(BasicApiChecker<Value, Impl, Ret>::FastCallback,
@@ -28154,11 +28154,11 @@ bool SetupTest(v8::Local<v8::Value> initial_value, LocalContext* env,
   } else {
 #ifdef V8_USE_SIMULATOR_WITH_GENERIC_C_CALLS
     c_func = v8::CFunction::Make(
-        BasicApiChecker<Value, Impl, Ret>::FastCallbackNoOptions,
-        FastCallbackNoOptionsWrapper<Value, Impl, Ret>);
+        BasicApiChecker<Value, Impl, Ret>::FastCallbackNoFallback,
+        FastCallbackNoFallbackWrapper<Value, Impl, Ret>);
 #else   // V8_USE_SIMULATOR_WITH_GENERIC_C_CALLS
     c_func = v8::CFunction::Make(
-        BasicApiChecker<Value, Impl, Ret>::FastCallbackNoOptions);
+        BasicApiChecker<Value, Impl, Ret>::FastCallbackNoFallback);
 #endif  // V8_USE_SIMULATOR_WITH_GENERIC_C_CALLS
   }
   CHECK_EQ(c_func.ArgumentInfo(0).GetType(), v8::CTypeInfo::Type::kV8Value);
@@ -28326,7 +28326,7 @@ void CallAndCheck(T expected_value, Behavior expected_behavior,
   }
   if (expected_path == ApiCheckerResult::kFastCalled) {
     if (checker.DidCallSlow()) {
-      error_msg << "Default path was called when fast path was expected. ";
+      error_msg << "Default path was called when no fallback was expected. ";
     }
   }
   if (error_msg.str().length() > 0) {
@@ -28599,7 +28599,7 @@ void CallAndDeopt() {
   CHECK(ifunction->HasAttachedOptimizedCode(CcTest::i_isolate()));
 }
 
-void CallNoOptions(int32_t expected_value) {
+void CallNoFallback(int32_t expected_value) {
   LocalContext env;
   v8::Local<v8::Value> initial_value(v8_num(42));
   ApiNumberChecker<int32_t> checker(expected_value, Behavior::kNoException);
@@ -29398,18 +29398,24 @@ TEST(FastApiCalls) {
   // Check for the deopt loop protection
   CallAndDeopt();
 
-  // Test callbacks without options
-  CallNoOptions(42);
+  // Test callbacks without a fallback support
+  CallNoFallback(42);
 
   // Test callback requesting access checks
   CallNoConvertReceiver(42);
 
   CheckDynamicTypeInfo();
 
-  // Throw an exception.
+  // Fallback to slow call and throw an exception.
   CallAndCheck<int32_t>(42, Behavior::kException, ApiCheckerResult::kFastCalled,
                         v8_num(42), Behavior::kException);
 
+  // Fallback to slow call and don't throw an exception.
+  CallAndCheck<int32_t>(43, Behavior::kNoException,
+                        ApiCheckerResult::kFastCalled, v8_num(43),
+                        Behavior::kNoException);
+
+  // Doesn't fallback to slow call, so don't throw an exception.
   CallAndCheck<int32_t>(44, Behavior::kNoException,
                         ApiCheckerResult::kFastCalled, v8_num(44),
                         Behavior::kNoException);
-- 
2.45.2


From 42718a3b5133bff93ba35d527b12238c2b666679 Mon Sep 17 00:00:00 2001
From: kxxt <rsworktech@outlook.com>
Date: Tue, 20 Aug 2024 09:14:39 +0200
Subject: [PATCH 3/3] Revert "[fastapi] Delete deprecated field
 FastApiCallbackOptions::wasm_memory"

This reverts commit dcc675f71cb5be606ec174734f1b964bd768535d.
---
 include/v8-fast-api-calls.h                   | 10 +++++
 src/compiler/fast-api-calls.cc                |  2 +-
 .../fast-api-call-lowering-reducer.h          |  6 ++-
 src/compiler/wasm-compiler.cc                 | 40 ++++++++++++++++++-
 4 files changed, 55 insertions(+), 3 deletions(-)

diff --git a/include/v8-fast-api-calls.h b/include/v8-fast-api-calls.h
index 18422e19cc5..1cd99cb880f 100644
--- a/include/v8-fast-api-calls.h
+++ b/include/v8-fast-api-calls.h
@@ -610,6 +610,16 @@ struct FastApiCallbackOptions {
    * The `data` passed to the FunctionTemplate constructor, or `undefined`.
    */
   v8::Local<v8::Value> data;
+
+  /**
+   * When called from WebAssembly, a view of the calling module's memory.
+   */
+  V8_DEPRECATED(
+      "The wasm memory should either be provided as a field of the receiver, "
+      "the data object of the FunctionTemplate, or as a normal parameter of "
+      "the API function. Since regular API calls don't have this magic "
+      "`wasm_memory parameter, one of the options above should be possible.")
+  FastApiTypedArray<uint8_t>* const wasm_memory = nullptr;
 };
 
 namespace internal {
diff --git a/src/compiler/fast-api-calls.cc b/src/compiler/fast-api-calls.cc
index 7f56f42ec74..7ac45043bed 100644
--- a/src/compiler/fast-api-calls.cc
+++ b/src/compiler/fast-api-calls.cc
@@ -364,7 +364,7 @@ Node* FastApiCallBuilder::Build(const FastApiCallFunctionVector& c_functions,
     // If this check fails, you've probably added new fields to
     // v8::FastApiCallbackOptions, which means you'll need to write code
     // that initializes and reads from them too.
-    static_assert(kSize == sizeof(uintptr_t) * 3);
+    static_assert(kSize == sizeof(uintptr_t) * 4);
     stack_slot = __ StackSlot(kSize, kAlign);
 
     __ Store(
diff --git a/src/compiler/turboshaft/fast-api-call-lowering-reducer.h b/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
index 2d268a242f5..8e45e80a763 100644
--- a/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
+++ b/src/compiler/turboshaft/fast-api-call-lowering-reducer.h
@@ -87,7 +87,7 @@ class FastApiCallLoweringReducer : public Next {
         // If this check fails, you've probably added new fields to
         // v8::FastApiCallbackOptions, which means you'll need to write code
         // that initializes and reads from them too.
-        static_assert(kSize == sizeof(uintptr_t) * 3);
+        static_assert(kSize == sizeof(uintptr_t) * 4);
         stack_slot = __ StackSlot(kSize, kAlign);
 
         // isolate
@@ -105,6 +105,10 @@ class FastApiCallLoweringReducer : public Next {
         __ StoreOffHeap(stack_slot, data_argument_to_pass,
                         MemoryRepresentation::UintPtr(),
                         offsetof(v8::FastApiCallbackOptions, data));
+        // wasm_memory = 0
+        __ StoreOffHeap(stack_slot, __ IntPtrConstant(0),
+                        MemoryRepresentation::UintPtr(),
+                        offsetof(v8::FastApiCallbackOptions, wasm_memory));
 
         args.push_back(stack_slot);
         builder.AddParam(MachineType::Pointer());
diff --git a/src/compiler/wasm-compiler.cc b/src/compiler/wasm-compiler.cc
index c2eb98ddfe5..08bd285dc7c 100644
--- a/src/compiler/wasm-compiler.cc
+++ b/src/compiler/wasm-compiler.cc
@@ -8345,7 +8345,45 @@ class WasmWrapperGraphBuilder : public WasmGraphBuilder {
         [](const CFunctionInfo* signature, Node* c_return_value) {
           return c_return_value;
         },
-        [](Node* options_stack_slot) {},
+        // Initialize wasm-specific callback options fields
+        [this](Node* options_stack_slot) {
+          Node* mem_start;
+          Node* mem_size;
+          if (module_->memories.empty()) {
+            mem_start = gasm_->UintPtrConstant(0);
+            mem_size = gasm_->UintPtrConstant(0);
+          } else if (module_->memories.size() == 1) {
+            mem_start = LOAD_INSTANCE_FIELD_NO_ELIMINATION(
+                Memory0Start, MachineType::Pointer());
+            mem_size = LOAD_INSTANCE_FIELD_NO_ELIMINATION(
+                Memory0Size, MachineType::UintPtr());
+          } else {
+            FATAL(
+                "Fast API does not support multiple memories yet "
+                "(https://crbug.com/v8/14260)");
+          }
+
+          START_ALLOW_USE_DEPRECATED()
+          constexpr int kSize = sizeof(FastApiTypedArray<uint8_t>);
+          constexpr int kAlign = alignof(FastApiTypedArray<uint8_t>);
+          END_ALLOW_USE_DEPRECATED()
+
+          Node* stack_slot = gasm_->StackSlot(kSize, kAlign);
+
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       stack_slot, 0, mem_size);
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       stack_slot, sizeof(size_t), mem_start);
+
+          gasm_->Store(StoreRepresentation(MachineType::PointerRepresentation(),
+                                           kNoWriteBarrier),
+                       options_stack_slot,
+                       static_cast<int>(
+                           offsetof(v8::FastApiCallbackOptions, wasm_memory)),
+                       stack_slot);
+        },
         // Generate fallback slow call if fast call fails
         [this, callable_node, native_context, receiver_node]() -> Node* {
           int wasm_count = static_cast<int>(sig_->parameter_count());
-- 
2.45.2

